# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D1pr08irn96z5udKMQ1hTPvAZjRmDnz0
"""

!pip install optuna swifter

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import optuna
from sklearn.model_selection import learning_curve
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, recall_score, classification_report
from gensim.models import Word2Vec
from sklearn.metrics.pairwise import cosine_similarity
import swifter
import re
from sklearn.model_selection import cross_val_score
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import uniform
import random
import string
from wordcloud import WordCloud

from google.colab import drive
drive.mount('/content/drive')

book = pd.read_csv('/content/drive/MyDrive/Books.csv')
ratings = pd.read_csv('/content/drive/MyDrive/Ratings.csv')
users = pd.read_csv('/content/drive/MyDrive/Users.csv')

book.isnull().sum()

book.nunique()

"""#EDA"""

merged_df = pd.merge(book, ratings, on='ISBN')

final_df = pd.merge(merged_df, users, on='User-ID')
final_df.head()

final_df.info()

final_df.shape

final_df.isnull().sum()

final_df.drop(columns=['Image-URL-L','Publisher'],inplace = True)
final_df['Age'].fillna(final_df['Age'].median(),inplace = True)
final_df['Book-Author'].fillna(final_df['Book-Author'].mode()[0],inplace = True)

final_df.isnull().sum()

sample_size = 1000
sample_df = final_df.sample(n=sample_size, random_state=42)
sample_df['Rating_Category'] = pd.cut(sample_df['Book-Rating'], bins=[0, 3, 7, 10], labels=['Low', 'Medium', 'High'])
plt.figure(figsize=(16, 150))
sns.barplot(data=sample_df, x='Book-Rating', y='Book-Author', hue='Rating_Category', palette={'Low': 'red', 'Medium': 'yellow', 'High': 'green'})
plt.title('Average Rating by Author')
plt.xlabel('Average Rating')
plt.ylabel('Book Author')
plt.legend(title='Rating Category')
plt.show()

"""#average rating by book title

"""

sample_size = 1000
sample_df = final_df.sample(n=sample_size, random_state=42)
sample_df['Rating_Category'] = pd.cut(sample_df['Book-Rating'], bins=[0, 3, 7, 10], labels=['Low', 'Medium', 'High'])
plt.figure(figsize=(16, 150))
sns.barplot(data=sample_df, x='Book-Rating', y='Book-Title', hue='Rating_Category', palette={'Low': 'red', 'Medium': 'yellow', 'High': 'green'})
plt.title('Average Rating by Title of Book')
plt.xlabel('Average Rating')
plt.ylabel('Title of Book')
plt.legend(title='Rating Category')
plt.show()

final_df.isna().sum()

final_df['Age'] = final_df['Age'].astype(int)
final_df['Book-Rating'] = final_df['Book-Rating'].astype(int)
final_df['User-ID '] = final_df['User-ID'].astype(int)

final_df.duplicated().sum()

final_df = final_df[final_df['Book-Rating']!=0]

final_df[final_df['Book-Rating'] == 0].value_counts().head(10)

sample_size = 1000
sample_df = final_df.sample(n=sample_size, random_state=42)
sample_df['Rating_Category'] = pd.cut(sample_df['Book-Rating'], bins=[0, 3, 7, 10], labels=['Low', 'Medium', 'High'])
plt.figure(figsize=(16, 150))
sns.barplot(data=sample_df, x='Book-Rating', y='Book-Title', hue='Rating_Category', palette={'Low': 'red', 'Medium': 'yellow', 'High': 'green'})
plt.title('Average Rating by Title of Book')
plt.xlabel('Average Rating')
plt.ylabel('Title of Book')
plt.legend(title='Rating Category')
plt.show()

age_q1 = final_df['Age'].quantile(0.25)
age_q3 = final_df['Age'].quantile(0.75)
age_iqr = age_q3 - age_q1
age_lower_bound = age_q1 - 1.5 * age_iqr
age_upper_bound = age_q3 + 1.5 * age_iqr
final_df = final_df[(final_df['Age'] >= age_lower_bound) & (final_df['Age'] <= age_upper_bound)]
year_q1 = final_df['Year-Of-Publication'].astype(int).quantile(0.25)
year_q3 = final_df['Year-Of-Publication'].astype(int).quantile(0.75)
year_iqr = year_q3 - year_q1
year_lower_bound = year_q1 - 1.5 * year_iqr
year_upper_bound = year_q3 + 1.5 * year_iqr
final_df = final_df[(final_df['Year-Of-Publication'].astype(int) >= year_lower_bound) & (final_df['Year-Of-Publication'].astype(int) <= year_upper_bound)] # Removes rows that have 'Year-Of-Publication' values ​​outside the range [year_lower_bound, year_upper_bound]
final_df.describe()

pd.set_option('display.max_colwidth', None)

title_sample = final_df[['ISBN', 'Book-Title']].sample(20) # let's see sample title of book

print(title_sample.to_string(index=False))

Genres = ['Fiction', 'Novel', 'Adventure', 'Romance', 'History', 'Thriller', 'Horror', 'Biography', 'Fantasy' ,'Other']

sentences = [title.split() for title in final_df['Book-Title']]

model = Word2Vec(sentences, vector_size=500, window=5, min_count=5, sg=2)

def clean_text(text):
    # Removes special characters and numbers
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    # Convert to lowercase
    text = text.lower()
    return text

# Define function to predict genre from book title
def predict_genre(book_title):
    clean_title = clean_text(book_title)
    title_words = clean_title.split()

    # Check if title_words is empty
    if not title_words:
        return 'Other'

    # Filter title words that are present in the Word2Vec model vocabulary
    title_words = [word for word in title_words if word in model.wv]

    # Check if there are words left after filtering
    if not title_words:
        return 'Other'

    # Get the average word vector for the title
    title_vector = sum([model.wv[word] for word in title_words]) / len(title_words)

    # Find the most similar genre based on cosine similarity
    most_similar_genre = None # Initial genre
    max_similarity = -1
    for genre in Genres:
        genre_vector = model.wv[genre]
        similarity = cosine_similarity([title_vector], [genre_vector])[0][0] # cosine_similarity : search for similarities between two vectors in multidimensional
        if similarity > max_similarity:
            max_similarity = similarity
            most_similar_genre = genre

    return most_similar_genre

book_title_to_predict = "Wie man einen Mann aufreisst (Heyne BÃ¼cher)"
predicted_genre = predict_genre(book_title_to_predict) # Genre predict of the book

print(f"The predicted genre for '{book_title_to_predict}' is {predicted_genre}.")

final_df['Genre'] = final_df.apply(lambda row: predict_genre(row['Book-Title']), axis=1)

final_df